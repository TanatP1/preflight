name: ${PROJECT_NAME}
services:
  postgres:
    image: postgres:17-alpine
    container_name: ${PROJECT_NAME}-db
    restart: always
    ports:
      - "5417:5432"
    volumes:
      - pf-data:/var/lib/postgresql/data
      - ./_entrypoint:/docker-entrypoint-initdb.d  # This handles PostgreSQL initialization
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_APP_USER=${POSTGRES_APP_USER}
      - POSTGRES_APP_PASSWORD=${POSTGRES_APP_PASSWORD}
    networks:
      - pf-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    depends_on:
      postgres:
        condition: service_healthy  # Wait for postgres to be healthy
    image: ${FRONTEND_IMAGE_NAME}
    container_name: ${PROJECT_NAME}-frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - pf-net
    environment:
      # Database connection for Next.js
      - DATABASE_URL=postgresql://${POSTGRES_APP_USER}:${POSTGRES_APP_PASSWORD}@${PROJECT_NAME}-db:5432/${POSTGRES_DB}
      - NODE_ENV=production
    volumes:
      - ./logs:/app/logs
    # Override entrypoint to use our app-specific entrypoint
    entrypoint: ["/app/app-entrypoint.sh"]
    command: ["node", "server.js"]

volumes:
  pf-data:
    name: ${PROJECT_NAME}-pf-data
networks:
  pf-net:
    name: ${PROJECT_NAME}-pf-net
